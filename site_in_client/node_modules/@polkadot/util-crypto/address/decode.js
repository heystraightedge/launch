"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = decode;

var _util = require("@polkadot/util");

var _decode = _interopRequireDefault(require("../base58/decode"));

var _checkChecksum = _interopRequireDefault(require("./checkChecksum"));

var _defaults = _interopRequireDefault(require("./defaults"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function decode(encoded, ignoreChecksum, ss58Format = 99) {
  if ((0, _util.isU8a)(encoded) || (0, _util.isHex)(encoded)) {
    return (0, _util.u8aToU8a)(encoded);
  }

  const wrapError = message => `Decoding ${encoded}: ${message}`;

  let decoded;

  try {
    decoded = (0, _decode.default)(encoded);
  } catch (error) {
    throw new Error(wrapError(error.message));
  } // assert(defaults.allowedPrefix.includes(decoded[0] as Prefix), error('Invalid decoded address prefix'));


  (0, _util.assert)(_defaults.default.allowedEncodedLengths.includes(decoded.length), wrapError('Invalid decoded address length')); // TODO Unless it is an "use everywhere" prefix, throw an error
  // if (decoded[0] !== prefix) {
  //   console.log(`WARN: Expected ${prefix}, found ${decoded[0]}`);
  // }

  const [isValid, endPos] = (0, _checkChecksum.default)(decoded);
  (0, _util.assert)(ignoreChecksum || isValid, wrapError('Invalid decoded address checksum'));
  return decoded.slice(1, endPos);
}