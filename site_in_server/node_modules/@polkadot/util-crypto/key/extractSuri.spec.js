"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extractSuri = _interopRequireDefault(require("./extractSuri"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('keyExtractSuri', () => {
  it('does not extract from invalid suri', () => {
    expect(() => (0, _extractSuri.default)('//2')).toThrow('Unable to match provided value to a secret URI');
  });
  it('derives on "hello world"', () => {
    const test = (0, _extractSuri.default)('hello world');
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(0);
  });
  it('derives on "hello world/1', () => {
    const test = (0, _extractSuri.default)('hello world/1');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(1);
    expect(test.path[0].isHard).toEqual(false);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world/DOT', () => {
    const test = (0, _extractSuri.default)('hello world/DOT');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(1);
    expect(test.path[0].isHard).toEqual(false);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([12, 68, 79, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world//1', () => {
    const test = (0, _extractSuri.default)('hello world//1');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(1);
    expect(test.path[0].isHard).toEqual(true);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world//DOT', () => {
    const test = (0, _extractSuri.default)('hello world//DOT');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(1);
    expect(test.path[0].isHard).toEqual(true);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([12, 68, 79, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world//1/DOT', () => {
    const test = (0, _extractSuri.default)('hello world//1/DOT');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(2);
    expect(test.path[0].isHard).toEqual(true);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    expect(test.path[1].isHard).toEqual(false);
    expect(test.path[1].chainCode).toEqual(Uint8Array.from([12, 68, 79, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world//DOT/1', () => {
    const test = (0, _extractSuri.default)('hello world//DOT/1');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(2);
    expect(test.path[0].isHard).toEqual(true);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([12, 68, 79, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    expect(test.path[1].isHard).toEqual(false);
    expect(test.path[1].chainCode).toEqual(Uint8Array.from([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world///password"', () => {
    const test = (0, _extractSuri.default)('hello world///password');
    expect(test.password).toEqual('password');
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(0);
  });
  it('derives on "hello world//1/DOT///password"', () => {
    const test = (0, _extractSuri.default)('hello world//1/DOT///password');
    expect(test.password).toEqual('password');
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(2);
    expect(test.path[0].isHard).toEqual(true);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    expect(test.path[1].isHard).toEqual(false);
    expect(test.path[1].chainCode).toEqual(Uint8Array.from([12, 68, 79, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on "hello world/1//DOT///password"', () => {
    const test = (0, _extractSuri.default)('hello world/1//DOT///password');
    expect(test.password).toEqual('password');
    expect(test.phrase).toEqual('hello world');
    expect(test.path.length).toEqual(2);
    expect(test.path[0].isHard).toEqual(false);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    expect(test.path[1].isHard).toEqual(true);
    expect(test.path[1].chainCode).toEqual(Uint8Array.from([12, 68, 79, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
  it('derives on actual Alice', () => {
    const test = (0, _extractSuri.default)('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice');
    expect(test.password).not.toBeDefined();
    expect(test.phrase).toEqual('bottom drive obey lake curtain smoke basket hold race lonely fit walk');
    expect(test.path.length).toEqual(1);
    expect(test.path[0].isHard).toEqual(true);
    expect(test.path[0].chainCode).toEqual(Uint8Array.from([20, 65, 108, 105, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
  });
});