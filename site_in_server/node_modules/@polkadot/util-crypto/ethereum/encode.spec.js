"use strict";

var _keccak = require("../keccak");

var _ = require("./");

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('formatAddress', () => {
  describe('address to address encoding', () => {
    const ADDRESS = '0x00a329c0648769A73afAc7F9381E08FB43dBEA72';
    it('returns 0x for no address', () => {
      expect((0, _.ethereumEncode)()).toBe('0x');
    });
    it('returns fails on invalid address', () => {
      expect(() => (0, _.ethereumEncode)('0xnotaddress')).toThrow(/Invalid address or publicKey passed/);
    });
    it('converts lowercase to the checksummed address', () => {
      expect((0, _.ethereumEncode)(ADDRESS.toLowerCase())).toBe(ADDRESS);
    });
    it('converts uppercase to the checksummed address', () => {
      expect((0, _.ethereumEncode)(ADDRESS.toUpperCase().replace('0X', '0x'))).toBe(ADDRESS);
    });
    it('returns formatted address on checksum input', () => {
      expect((0, _.ethereumEncode)(ADDRESS)).toBe(ADDRESS);
    });
  });
  describe('from publicKey', () => {
    const ADDRESS = '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887';
    it('encodes a compressed publicKey', () => {
      expect((0, _.ethereumEncode)('0x03b9dc646dd71118e5f7fda681ad9eca36eb3ee96f344f582fbe7b5bcdebb13077')).toEqual(ADDRESS);
    });
    it('encodes an expanded publicKey', () => {
      expect((0, _.ethereumEncode)('0x04b9dc646dd71118e5f7fda681ad9eca36eb3ee96f344f582fbe7b5bcdebb1307763fe926c273235fd979a134076d00fd1683cbd35868cb485d4a3a640e52184af')).toEqual(ADDRESS);
    });
    it('encodes a pre-hashed key', () => {
      expect((0, _.ethereumEncode)((0, _keccak.keccakAsU8a)('0xb9dc646dd71118e5f7fda681ad9eca36eb3ee96f344f582fbe7b5bcdebb1307763fe926c273235fd979a134076d00fd1683cbd35868cb485d4a3a640e52184af'))).toEqual(ADDRESS);
    });
  });
});