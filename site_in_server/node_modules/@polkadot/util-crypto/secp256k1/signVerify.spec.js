"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _util = require("@polkadot/util");

var _asU8a = _interopRequireDefault(require("../random/asU8a"));

var _fromSeed = _interopRequireDefault(require("./keypair/fromSeed"));

var _hasher = _interopRequireDefault(require("./hasher"));

var _sign = _interopRequireDefault(require("./sign"));

var _verify = _interopRequireDefault(require("./verify"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const MESSAGE = (0, _util.stringToU8a)('this is a message');
describe('sign and verify', () => {
  it('verify message signature', () => {
    const address = '0x59f587c045d4d4e9aa1016eae43770fc0551df8a385027723342753a876aeef0';
    const sig = '0x92fcacf0946bbd10b31dfe16d567ed1d3014e81007dd9e5256e19c0f07eacc1643b151ca29e449a765e16a7ce59b88d800467d6b3412d30ea8ad22307a59664b00';
    const msg = (0, _util.stringToU8a)('secp256k1');
    expect((0, _verify.default)(msg, sig, address)).toBe(true);
  });
  it('has 65-byte signatures', () => {
    const pair = (0, _fromSeed.default)((0, _asU8a.default)());
    expect((0, _sign.default)(MESSAGE, pair)).toHaveLength(65);
  });
  it('signs/verifies a message by random key (blake2)', () => {
    const pair = (0, _fromSeed.default)((0, _asU8a.default)());
    const signature = (0, _sign.default)(MESSAGE, pair);
    const address = (0, _hasher.default)('blake2', pair.publicKey);
    expect((0, _verify.default)(MESSAGE, signature, address)).toBe(true);
  });
  it('signs/verifies a message by random key (keccak)', () => {
    const pair = (0, _fromSeed.default)((0, _asU8a.default)());
    const signature = (0, _sign.default)(MESSAGE, pair, 'keccak');
    const address = (0, _hasher.default)('keccak', pair.publicKey);
    expect((0, _verify.default)(MESSAGE, signature, address, 'keccak')).toBe(true);
  });
  it('fails verification on hasher mismatches', () => {
    const pair = (0, _fromSeed.default)((0, _asU8a.default)());
    const signature = (0, _sign.default)(MESSAGE, pair, 'keccak');
    const address = (0, _hasher.default)('keccak', pair.publicKey);
    expect((0, _verify.default)(MESSAGE, signature, address, 'blake2')).toBe(false);
  });
  it('works over a range of random keys (blake2)', () => {
    for (let i = 0; i < 256; i++) {
      const pair = (0, _fromSeed.default)((0, _asU8a.default)());

      try {
        expect((0, _verify.default)(MESSAGE, (0, _sign.default)(MESSAGE, pair, 'blake2'), (0, _hasher.default)('blake2', pair.publicKey), 'blake2')).toBe(true);
      } catch (error) {
        console.error(`blake2 failed on #${i}`);
        throw error;
      }
    }
  }, 120000);
  it('works over a range of random keys (keccak)', () => {
    for (let i = 0; i < 256; i++) {
      const pair = (0, _fromSeed.default)((0, _asU8a.default)());

      try {
        expect((0, _verify.default)(MESSAGE, (0, _sign.default)(MESSAGE, pair, 'keccak'), (0, _hasher.default)('keccak', pair.publicKey), 'keccak')).toBe(true);
      } catch (error) {
        console.error(`keccak failed on #${i}`);
        throw error;
      }
    }
  }, 120000);
});